from typing import Tuple
import jax.numpy as jnp


class BiasFields:
    """
    Represents the bias field generated by the atom chip.
    """

    def __init__(
        self,
        currents: Tuple[float, float, float],
        coil_factors: Tuple[float, float, float],
        stray_fields: Tuple[float, float, float],
    ):
        """
        Initialize the bias field object.

        Args:
            currents: Currents for x, y, z bias fields.
            coil_factors: Coil factors for x, y, z bias fields.
            stray_fields: Stray fields for x, y, z bias fields.
        """
        currents = jnp.float64(currents)
        coil_factors = jnp.float64(coil_factors)
        stray_fields = jnp.float64(stray_fields)

        self.bias = currents * coil_factors + stray_fields

    def get_fields(self, points: jnp.ndarray) -> jnp.ndarray:
        return jnp.tile(self.bias, (points.shape[0], 1))


ZERO_BIAS_FIELD = BiasFields(
    currents=(0.0, 0.0, 0.0),
    coil_factors=(0.0, 0.0, 0.0),
    stray_fields=(0.0, 0.0, 0.0),
)
