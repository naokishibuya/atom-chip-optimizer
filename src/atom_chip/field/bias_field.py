from typing import NamedTuple
import jax
import jax.numpy as jnp


class BiasConfig(NamedTuple):
    """
    Represents a magnetic bias field generated by the atom chip.

    Attributes:
        coil_factors (jnp.ndarray): Factors for the coil currents, shape (3,).
        currents (jnp.ndarray): Current values for the coils, shape (3,).
        stray_fields (jnp.ndarray): Stray magnetic fields, shape (3,).
    """

    # fmt: off
    coil_factors: jnp.ndarray  # shape (3,)
    currents    : jnp.ndarray  # shape (3,)
    stray_fields: jnp.ndarray  # shape (3,)
    # fmt: on


# fmt: off
ZERO_BIAS_CONFIG = BiasConfig(
    coil_factors = jnp.array([0.0, 0.0, 0.0], dtype=jnp.float64),
    currents     = jnp.array([0.0, 0.0, 0.0], dtype=jnp.float64),
    stray_fields = jnp.array([0.0, 0.0, 0.0], dtype=jnp.float64),
)
# fmt: on


@jax.jit
def get_bias_fields(points: jnp.ndarray, params: BiasConfig) -> jnp.ndarray:
    bias = params.coil_factors * params.currents + params.stray_fields
    return jnp.broadcast_to(bias, (points.shape[0], 3))


def bias_config_to_dict(params: BiasConfig) -> dict:
    # fmt: off
    return {
        "coil_factors": params.coil_factors.tolist(),
        "currents"    : params.currents.tolist(),
        "stray_fields": params.stray_fields.tolist(),
    }
    # fmt: on


def dict_to_bias_config(data: dict) -> BiasConfig:
    # fmt: off
    return BiasConfig(
        coil_factors = jnp.array(data["coil_factors"], dtype=jnp.float64),
        currents     = jnp.array(data["currents"]    , dtype=jnp.float64),
        stray_fields = jnp.array(data["stray_fields"], dtype=jnp.float64),
    )
    # fmt: on
