from typing import NamedTuple
import jax
import jax.numpy as jnp


class BiasFieldParams(NamedTuple):
    """
    Represents a magnetic bias field generated by the atom chip.

    Attributes:
        coil_factors (jnp.ndarray): Factors for the coil currents, shape (3,).
        currents (jnp.ndarray): Current values for the coils, shape (3,).
        stray_fields (jnp.ndarray): Stray magnetic fields, shape (3,).
    """

    # fmt: off
    coil_factors: jnp.ndarray  # shape (3,)
    currents    : jnp.ndarray  # shape (3,)
    stray_fields: jnp.ndarray  # shape (3,)
    # fmt: on


@jax.jit
def get_bias_fields(points: jnp.ndarray, params: BiasFieldParams) -> jnp.ndarray:
    bias = params.coil_factors * params.currents + params.stray_fields
    return jnp.broadcast_to(bias, (points.shape[0], 3))


def bias_field_params_to_dict(params: BiasFieldParams) -> dict:
    # fmt: off
    return {
        "coil_factors": params.coil_factors.tolist(),
        "currents"    : params.currents.tolist(),
        "stray_fields": params.stray_fields.tolist(),
    }
    # fmt: on


def bias_field_params_from_dict(data: dict) -> BiasFieldParams:
    # fmt: off
    return BiasFieldParams(
        coil_factors = jnp.array(data["coil_factors"], dtype=jnp.float64),
        currents     = jnp.array(data["currents"]    , dtype=jnp.float64),
        stray_fields = jnp.array(data["stray_fields"], dtype=jnp.float64),
    )
    # fmt: on


class BiasFields:
    """
    Represents the bias field generated by the atom chip.
    """

    def __init__(
        self,
        # fmt: off
        coil_factors: jnp.ndarray,  # shape (3,)
        currents: jnp.ndarray,  # shape (3,)
        stray_fields: jnp.ndarray,  # shape (3,)
        # fmt: on
    ):
        self.params = BiasFieldParams(coil_factors, currents, stray_fields)

    def get_fields(self, points: jnp.ndarray) -> jnp.ndarray:
        return get_bias_fields(points, self.params)

    def to_dict(self) -> dict:
        return bias_field_params_to_dict(self.params)

    @staticmethod
    def from_dict(data: dict) -> "BiasFields":
        params = bias_field_params_from_dict(data)
        return BiasFields(**params._asdict())


ZERO_BIAS_FIELD = BiasFields(
    # fmt: off
    coil_factors=jnp.array([0.0, 0.0, 0.0], dtype=jnp.float64),
    currents=jnp.array([0.0, 0.0, 0.0], dtype=jnp.float64),
    stray_fields=jnp.array([0.0, 0.0, 0.0], dtype=jnp.float64),
    # fmt: on
)
