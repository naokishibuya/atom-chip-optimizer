from dataclasses import dataclass
import jax.numpy as jnp


# fmt: off
@dataclass(frozen=True)
class BiasFields:
    """
    Represents the bias field generated by the atom chip.
    """

    coil_factors: jnp.ndarray  # shape (3,)
    currents    : jnp.ndarray  # shape (3,)
    stray_fields: jnp.ndarray  # shape (3,)

    def get_fields(self, points: jnp.ndarray) -> jnp.ndarray:
        bias = self.coil_factors * self.currents + self.stray_fields
        return jnp.broadcast_to(bias, (points.shape[0], 3))

    def to_dict(self) -> dict:
        return {
            "coil_factors": self.coil_factors.tolist(),
            "currents"    : self.currents.tolist(),
            "stray_fields": self.stray_fields.tolist(),
        }

    @staticmethod
    def from_dict(data: dict) -> "BiasFields":
        return BiasFields(
            coil_factors = jnp.array(data["coil_factors"], dtype=jnp.float64),
            currents     = jnp.array(data["currents"]    , dtype=jnp.float64),
            stray_fields = jnp.array(data["stray_fields"], dtype=jnp.float64),
        )
# fmt: on


# fmt: off
ZERO_BIAS_FIELD = BiasFields(
    coil_factors = jnp.array([0.0, 0.0, 0.0]),
    currents     = jnp.array([0.0, 0.0, 0.0]),
    stray_fields = jnp.array([0.0, 0.0, 0.0]),
)
# fmt: on
